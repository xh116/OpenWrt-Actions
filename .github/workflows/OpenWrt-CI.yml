#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# <https://github.com/82kg/autoBuildOP>

name: Openwrt-X86_64-2020706

on:
  push:
     branches: 
       - master
  #schedule:
    #- cron: 0 23 * * *
    
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          echo "Deleting files, please wait ..."
          sudo rm -rf \
            /usr/share/dotnet /etc/apt/sources.list.d/* \
            /etc/mysql \
            /etc/php
          sudo -E apt-get -y purge \
            azure-cli \
            ghc* \
            zulu* \
            hhvm \
            llvm* \
            firefox \
            google* \
            dotnet* \
            powershell \
            openjdk* \
            mysql* \
            php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          
      - name: Clone source code
        env: 
          REPO_URL: https://github.com/coolsnowwolf/lede
          REPO_BRANCH: master
        run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
      
      - name: add helloword
        run: cd openwrt && git clone https://github.com/fw876/helloworld package/openwrt-packages/helloworld

      - name: Update feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a          

      - name: Costom configure file
        working-directory: ./openwrt
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # ========================固件定制部分========================
          # 

          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 

          # 以下为定制化固件选项和说明:
          #

          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #

          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 

          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          EOF

          # 固件压缩:
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF

          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF

          # IPv6支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          # CONFIG_PACKAGE_ipv6helper=y
          # EOF

          # 多文件系统支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # CONFIG_PACKAGE_kmod-fs-squashfs=y
          # EOF

          # USB3.0支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y
          # EOF

          # 常用LuCI插件选择:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-accesscontrol=n          
          CONFIG_PACKAGE_luci-app-adbyby-plus=n
          CONFIG_PACKAGE_luci-app-amule=n           
          CONFIG_PACKAGE_luci-app-filetransfer=n
          CONFIG_PACKAGE_luci-app-arpbind=n
          CONFIG_PACKAGE_luci-app-airplay2=n
          CONFIG_PACKAGE_luci-app-ddns=n          
          CONFIG_PACKAGE_luci-app-diskman=n
          CONFIG_PACKAGE_luci-app-flowoffload=y        
          CONFIG_PACKAGE_luci-app-firewall=n          
          CONFIG_PACKAGE_luci-app-qbittorrent=n
          CONFIG_PACKAGE_luci-app-nlbwmon=n          
          CONFIG_PACKAGE_luci-app-vsftpd=n
          CONFIG_PACKAGE_luci-app-ipsec-vpnd=n
          CONFIG_PACKAGE_luci-app-vlmcsd=n          
          CONFIG_PACKAGE_luci-app-upnp=n
          CONFIG_PACKAGE_luci-app-wol=n
          CONFIG_PACKAGE_luci-app-udpxy=n
          CONFIG_PACKAGE_luci-app-zerotier=n
          CONFIG_PACKAGE_luci-app-pptp-server=n
          CONFIG_PACKAGE_luci-app-samba=n
          CONFIG_PACKAGE_luci-app-sqm=n          
          CONFIG_PACKAGE_luci-app-v2ray-server=n
          CONFIG_PACKAGE_luci-app-unblockmusic=n          
          CONFIG_PACKAGE_luci-app-xlnetacc=n
          CONFIG_PACKAGE_luci-app-wrtbwmon=n
          CONFIG_PACKAGE_luci-app-ramfree=n
          CONFIG_PACKAGE_luci-app-openvpn-server=n           
          CONFIG_PACKAGE_luci-app-music-remote-center=n                                      
          EOF
          
          # Translations:
          cat >> .config <<EOF                  
          CONFIG_LUCI_LANG_en=y                    
          EOF
          
          # LuCI主题:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_luci-theme-argon=n
          # CONFIG_PACKAGE_luci-theme-netgear=n
          # EOF

          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_autosamba=n                               
          # CONFIG_PACKAGE_curl=y
          # CONFIG_PACKAGE_htop=y
          # CONFIG_PACKAGE_nano=y
          # CONFIG_PACKAGE_screen=y
          # CONFIG_PACKAGE_tree=y
          # CONFIG_PACKAGE_vim-fuller=y
          # CONFIG_PACKAGE_wget=y
          EOF

          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          # cat >> .config <<EOF
          # # CONFIG_TARGET_IMAGES_PAD is not set
          # # CONFIG_VMDK_IMAGES is not set
          # EOF

          # 
          # ========================固件定制部分结束========================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        working-directory: ./openwrt
        run: |
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        working-directory: ./openwrt
        run: |
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s
          
      - name: Assemble artifact
        working-directory: ./openwrt
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find ./bin/targets/ -name "*combined.img*" | xargs -i mv -f {} ./artifact/
          
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt firmware
          path: openwrt/artifact
