#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# <https://github.com/82kg/autoBuildOP>

name: ImmortialWrt-CI_x86
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false
  #schedule:
    #- cron: 0 23 * * *
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update 
          sudo -E apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
                bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
                g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev \
                libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev \
                libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
                python3 python3-pip python3-ply qemu-utils re2c rsync scons squashfs-tools subversion swig \
                texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          
      - name: Clone source code
        env: 
          REPO_URL: https://github.com/immortalwrt/immortalwrt
          REPO_BRANCH: master
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt && git clone https://github.com/immortalwrt/homeproxy.git package/homeproxy  


      - name: Update feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a          
      
      #- name: Set EN as default language
        #working-directory: ./openwrt
        #run: |
          #sed -i '/option lang auto/s/auto/en/g'  ./feeds/luci/modules/luci-base/root/etc/config/luci   
          
      - name: Load custom configuration
        run: |
          mv OpenWrt_Official/Immortalwrt/.config_x86 openwrt/.config
          cd ./openwrt
          
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        timeout-minutes: 5          

      - name: Make download
        working-directory: ./openwrt
        run: |
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
                     
      - name: Compile firmware
        working-directory: ./openwrt
        run: |
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s
          
      - name: Assemble artifact
        working-directory: ./openwrt
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find ./bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*rootfs.tar*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*combined*vmdk*" | xargs -i mv -f {} ./artifact/
          mv ./.config ./artifact/

          
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: ImmortalWrt 
          path: openwrt/artifact  
          
 
